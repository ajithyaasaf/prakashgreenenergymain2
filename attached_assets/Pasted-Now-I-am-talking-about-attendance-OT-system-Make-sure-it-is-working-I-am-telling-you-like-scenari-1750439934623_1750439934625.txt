Now I am talking about attendance OT system.

Make sure it is working. I am telling you like scenario:
Newly we implemented early login. For example, the department has check-in time 9.00 AM and check-out time 7.00 PM (12 hours format, Indian time). If user logs in before 9.00 AM, it is considered as early login. Then when he checks in early, it asks reason and image. If check-in at or after 9.00 AM, it is like how it is now, no problem.

If he checks out at or before 7.00 PM, it asks early check-out detection. It is also currently implemented and OT calculation also perfectly working now. But this system needs a little change. If person goes after 7.00 PM, the check-out form waits for 2.00 hours for employee to check out because he may forget. But this is very important part, listen carefully:
After two hours, the check-out button automatically checked out and usual UI in attendance changed — "Attendance for today completed" — like how it is already implemented. But also in this auto check-out, the extra time (I mean that two hour after 7.00 PM system takes and auto checked out) will not be considered as OT. It only considers his check-in time to 7.00 PM (default checkout time).

If person wants to do OT, the person comes to app after 7.00 PM, which time is set by the department page. For this department, after this time, the button OT is enabled. When user clicks it, it asks "Are you sure?" kind of confirmation. If he presses yes, it will start calculation as OT and disable the limit 2 hours that we implemented for auto check-out since user clicked OT button. When person completes OT and checks out, it will ask details like how it is implemented now.

Assume that person clicks OT and again he forgets to check out in his OT. Then again on that day 11.55 PM, it will auto check out because he forgot. And it is recorded for that user check-out as department checkout time, in this case which is 7.00 PM.

Make sure it is implemented through front end, backend, database, schema, service files to make sure it is completely implemented.

